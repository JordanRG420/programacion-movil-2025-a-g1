-- =============================================
-- DATABASE: exploraneiva_db
-- DESCRIPTION: Tourism management system database
-- VERSION: 1.0

-- =============================================

CREATE DATABASE IF NOT EXISTS exploraneiva_db;
USE exploraneiva_db;

-- 1. BASE TABLE: persona (Core entity for all system actors)
CREATE TABLE persona (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  apellido VARCHAR(100) NOT NULL,
  email VARCHAR(100) UNIQUE NOT NULL,
  telefono VARCHAR(20),
  direccion TEXT,
  fecha_nacimiento DATE,
  estado BOOLEAN DEFAULT TRUE COMMENT 'Active/Inactive status',
  fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- 2. ROLE-SPECIFIC TABLES

-- 2.1 Employee management
CREATE TABLE empleado (
  id INT AUTO_INCREMENT PRIMARY KEY,
  persona_id INT NOT NULL,
  fecha_ingreso DATE NOT NULL,
  salario DECIMAL(10,2) CHECK (salario > 0),
  cargo VARCHAR(50) NOT NULL DEFAULT 'Guía turístico',
  FOREIGN KEY (persona_id) REFERENCES persona(id) ON DELETE CASCADE,
  UNIQUE KEY (persona_id)
) ENGINE=InnoDB;

-- 2.2 Supplier management
CREATE TABLE proveedor (
  id INT AUTO_INCREMENT PRIMARY KEY,
  persona_id INT NOT NULL,
  especialidad VARCHAR(100) NOT NULL,
  ruc VARCHAR(20) UNIQUE COMMENT 'Tax identification',
  calificacion DECIMAL(3,2) DEFAULT 5.0 CHECK (calificacion BETWEEN 0 AND 5),
  FOREIGN KEY (persona_id) REFERENCES persona(id) ON DELETE CASCADE,
  UNIQUE KEY (persona_id)
) ENGINE=InnoDB;

-- 2.3 Customer management
CREATE TABLE cliente (
  id INT AUTO_INCREMENT PRIMARY KEY,
  persona_id INT NOT NULL,
  preferencias TEXT,
  tipo ENUM('Ocasional', 'Frecuente', 'VIP') DEFAULT 'Ocasional',
  puntos_acumulados INT DEFAULT 0,
  FOREIGN KEY (persona_id) REFERENCES persona(id) ON DELETE CASCADE,
  UNIQUE KEY (persona_id)
) ENGINE=InnoDB;

-- 3. BUSINESS OPERATIONS TABLES

-- 3.1 Tours catalog
CREATE TABLE tour (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  descripcion TEXT,
  precio DECIMAL(10,2) NOT NULL CHECK (precio > 0),
  duracion_horas DECIMAL(4,2) COMMENT 'Duration in hours',
  capacidad_maxima INT DEFAULT 10,
  proveedor_id INT,
  activo BOOLEAN DEFAULT TRUE,
  FOREIGN KEY (proveedor_id) REFERENCES proveedor(id) ON DELETE SET NULL,
  FULLTEXT INDEX (nombre, descripcion) -- For search functionality
) ENGINE=InnoDB;

-- 3.2 Booking system
CREATE TABLE reserva (
  id INT AUTO_INCREMENT PRIMARY KEY,
  cliente_id INT NOT NULL,
  tour_id INT NOT NULL,
  fecha_reserva DATETIME DEFAULT CURRENT_TIMESTAMP,
  fecha_tour DATETIME NOT NULL COMMENT 'Scheduled tour date/time',
  cantidad_personas INT NOT NULL DEFAULT 1 CHECK (cantidad_personas > 0),
  estado ENUM('PENDIENTE', 'CONFIRMADA', 'CANCELADA', 'COMPLETADA') DEFAULT 'PENDIENTE',
  metodo_pago ENUM('EFECTIVO', 'TARJETA', 'TRANSFERENCIA', 'APP') NULL,
  FOREIGN KEY (cliente_id) REFERENCES cliente(id),
  FOREIGN KEY (tour_id) REFERENCES tour(id),
  INDEX (fecha_tour, estado) -- For performance on common queries
) ENGINE=InnoDB;

-- 4. ADDITIONAL TABLES FOR COMPLETE FUNCTIONALITY

-- 4.1 Payment tracking
CREATE TABLE pago (
  id INT AUTO_INCREMENT PRIMARY KEY,
  reserva_id INT NOT NULL,
  monto DECIMAL(10,2) NOT NULL,
  fecha_pago DATETIME DEFAULT CURRENT_TIMESTAMP,
  comprobante VARCHAR(100),
  estado ENUM('PENDIENTE', 'COMPLETADO', 'RECHAZADO', 'REEMBOLSADO') DEFAULT 'PENDIENTE',
  FOREIGN KEY (reserva_id) REFERENCES reserva(id) ON DELETE CASCADE
) ENGINE=InnoDB;

-- 4.2 Reviews system
CREATE TABLE valoracion (
  id INT AUTO_INCREMENT PRIMARY KEY,
  reserva_id INT NOT NULL,
  puntuacion TINYINT NOT NULL CHECK (puntuacion BETWEEN 1 AND 5),
  comentario TEXT,
  fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (reserva_id) REFERENCES reserva(id) ON DELETE CASCADE,
  UNIQUE KEY (reserva_id)
) ENGINE=InnoDB;

-- 5. STORED PROCEDURES FOR KEY OPERATIONS

DELIMITER //

-- Procedure for creating a new booking
CREATE PROCEDURE sp_crear_reserva(
  IN p_cliente_id INT,
  IN p_tour_id INT,
  IN p_fecha_tour DATETIME,
  IN p_personas INT
)
BEGIN
  DECLARE v_capacidad INT;
  DECLARE v_disponible BOOLEAN;
  
  -- Check tour availability
  SELECT capacidad_maxima INTO v_capacidad FROM tour WHERE id = p_tour_id;
  
  -- Simple availability check (could be enhanced with actual booking counts)
  SET v_disponible = (p_personas <= v_capacidad);
  
  IF v_disponible THEN
    INSERT INTO reserva (cliente_id, tour_id, fecha_tour, cantidad_personas)
    VALUES (p_cliente_id, p_tour_id, p_fecha_tour, p_personas);
    
    SELECT LAST_INSERT_ID() AS reserva_id, 'Reserva creada exitosamente' AS mensaje;
  ELSE
    SIGNAL SQLSTATE '45000' 
    SET MESSAGE_TEXT = 'No hay disponibilidad para la cantidad de personas solicitada';
  END IF;
END //

-- Procedure for registering payments
CREATE PROCEDURE sp_registrar_pago(
  IN p_reserva_id INT,
  IN p_monto DECIMAL(10,2),
  IN p_metodo VARCHAR(20)
BEGIN
  DECLARE v_estado VARCHAR(20);
  
  -- Get current reservation status
  SELECT estado INTO v_estado FROM reserva WHERE id = p_reserva_id;
  
  IF v_estado = 'CANCELADA' THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'No se puede pagar una reserva cancelada';
  ELSE
    -- Register payment
    INSERT INTO pago (reserva_id, monto, estado)
    VALUES (p_reserva_id, p_monto, 'COMPLETADO');
    
    -- Update reservation status
    UPDATE reserva 
    SET estado = 'CONFIRMADA',
        metodo_pago = p_metodo
    WHERE id = p_reserva_id;
    
    SELECT 'Pago registrado y reserva confirmada' AS mensaje;
  END IF;
END //

DELIMITER ;

-- 6. SAMPLE DATA INSERTION (FOR TESTING)

INSERT INTO persona (nombre, apellido, email, telefono) VALUES
('Juan', 'Pérez', 'juan@example.com', '3101234567'),
('María', 'Gómez', 'maria@example.com', '3157654321'),
('Aventuras', 'Extremas', 'contacto@aventuras.com', '6012345678');

INSERT INTO empleado (persona_id, fecha_ingreso, salario, cargo) VALUES
(1, '2023-01-15', 2500000, 'Guía turístico');

INSERT INTO proveedor (persona_id, especialidad, ruc) VALUES
(3, 'Ecoturismo y aventura', '123456789-1');

INSERT INTO cliente (persona_id, tipo) VALUES
(2, 'Frecuente');

INSERT INTO tour (nombre, descripcion, precio, proveedor_id, capacidad_maxima) VALUES
('Tour Cañón del Magdalena', 'Recorrido por el impresionante cañón', 120000, 1, 15),
('Avistamiento de Aves', 'Experiencia ornitológica guiada', 80000, 1, 8);

-- Display success message
SELECT 'Database exploraneiva_db created successfully with sample data' AS message;